version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: protobuddy
      POSTGRES_USER: protobuddy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-protobuddy_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - protobuddy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U protobuddy -d protobuddy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - protobuddy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://protobuddy:${POSTGRES_PASSWORD:-protobuddy_secure_password}@postgres:5432/protobuddy
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      APIFY_API_TOKEN: ${APIFY_API_TOKEN}
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:8080}
      LOG_LEVEL: info
    volumes:
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - protobuddy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${BACKEND_URL:-http://localhost:3001/api}
    ports:
      - "8080:8080"
    networks:
      - protobuddy-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service (runs once)
  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://protobuddy:${POSTGRES_PASSWORD:-protobuddy_secure_password}@postgres:5432/protobuddy
    command: ["npm", "run", "db:migrate"]
    networks:
      - protobuddy-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Database Seeding Service (runs once)
  seed:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://protobuddy:${POSTGRES_PASSWORD:-protobuddy_secure_password}@postgres:5432/protobuddy
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
    command: ["npm", "run", "db:seed"]
    networks:
      - protobuddy-network
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  protobuddy-network:
    driver: bridge