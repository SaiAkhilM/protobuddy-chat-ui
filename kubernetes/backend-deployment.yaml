apiVersion: apps/v1
kind: Deployment
metadata:
  name: protobuddy-backend
  namespace: protobuddy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: protobuddy-backend
  template:
    metadata:
      labels:
        app: protobuddy-backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/saiakhilm/protobuddy-chat-ui/backend:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: protobuddy-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: protobuddy-secrets
              key: redis-url
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: protobuddy-secrets
              key: anthropic-api-key
        - name: APIFY_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: protobuddy-secrets
              key: apify-api-token
        - name: CORS_ORIGIN
          value: "https://protobuddy.yourdomain.com"
        - name: LOG_LEVEL
          value: "info"
        - name: SCRAPE_DELAY_MS
          value: "2000"
        - name: MAX_CONCURRENT_SCRAPES
          value: "2"
        - name: CACHE_TTL_SECONDS
          value: "7200"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: protobuddy-backend-service
  namespace: protobuddy
spec:
  selector:
    app: protobuddy-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: protobuddy-backend-ingress
  namespace: protobuddy
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.protobuddy.yourdomain.com
    secretName: protobuddy-backend-tls
  rules:
  - host: api.protobuddy.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: protobuddy-backend-service
            port:
              number: 80